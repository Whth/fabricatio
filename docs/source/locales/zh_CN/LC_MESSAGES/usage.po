# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Whth
# This file is distributed under the same license as the fabricatio package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: fabricatio \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-07 16:55+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../source/usage.rst:2
msgid "Usage"
msgstr "使用方法"

#: ../../source/usage.rst:5
msgid "Overview"
msgstr "概述"

#: ../../source/usage.rst:7
msgid ""
"Fabricatio is a streamlined Python library for building LLM applications "
"using an event-based agent structure. It features:"
msgstr "Fabricatio 是一个精简的 Python 库，用于通过基于事件的代理结构构建 LLM 应用程序。它具有以下特点："

#: ../../source/usage.rst:9
msgid ""
"**Event-Driven Architecture**: Robust task management through an "
"EventEmitter pattern"
msgstr "**事件驱动架构**：通过 EventEmitter 模式实现强大的任务管理"

#: ../../source/usage.rst:10
msgid ""
"**LLM Integration & Templating**: Seamlessly interact with large language"
" models and dynamic content generation"
msgstr "**LLM 集成与模板化**：无缝与大型语言模型交互并生成动态内容"

#: ../../source/usage.rst:11
msgid ""
"**Async & Extensible**: Fully asynchronous execution with easy extension "
"via custom actions and workflows"
msgstr "**异步与可扩展性**：完全异步执行，并可通过自定义操作和工作流轻松扩展"

#: ../../source/usage.rst:14
msgid "Basic Example"
msgstr "基本示例"

#: ../../source/usage.rst:16
msgid "Here's a simple \"Hello World\" example:"
msgstr "这里是一个简单的“Hello World”示例："

#: ../../source/usage.rst:49
msgid "Async Usage"
msgstr "异步使用"

#: ../../source/usage.rst:51
msgid "For asynchronous execution:"
msgstr "对于异步执行："

#: ../../source/usage.rst:81
msgid "Usage Scenarios"
msgstr ""

#: ../../source/usage.rst:83
msgid "Fabricatio supports various usage scenarios:"
msgstr ""

#: ../../source/usage.rst:85
msgid "Simple Chat"
msgstr ""

#: ../../source/usage.rst:86
msgid "Retrieval-Augmented Generation (RAG)"
msgstr ""

#: ../../source/usage.rst:87
msgid "Article Extraction"
msgstr ""

#: ../../source/usage.rst:88
msgid "Propose Task"
msgstr ""

#: ../../source/usage.rst:89
#, fuzzy
msgid "Code Review"
msgstr "概述"

#: ../../source/usage.rst:90
msgid "Write Outline"
msgstr ""

#: ../../source/usage.rst:92 ../../source/usage.rst:121
msgid ""
"For detailed examples and advanced usage patterns, explore the "
"``examples/`` directory in the repository."
msgstr "有关详细示例和高级使用模式，请探索存储库中的 ``examples/`` 目录。"

#: ../../source/usage.rst:95
msgid "Key Concepts"
msgstr "关键概念"

#: ../../source/usage.rst:97
msgid "**Actions**"
msgstr "**操作**"

#: ../../source/usage.rst:98
msgid ""
"The basic unit of work in Fabricatio. Each action performs a specific "
"task and can be chained together."
msgstr "Fabricatio 中的基本工作单元。每个操作执行特定任务，并可以串联在一起。"

#: ../../source/usage.rst:100
msgid "**Workflows**"
msgstr "**工作流**"

#: ../../source/usage.rst:101
msgid "A sequence of actions that define how tasks are processed."
msgstr "定义任务如何被处理的一系列操作。"

#: ../../source/usage.rst:103
msgid "**Events**"
msgstr "**事件**"

#: ../../source/usage.rst:104
msgid ""
"Triggers that initiate workflows. Events follow an event-driven "
"architecture pattern."
msgstr "触发工作流的机制。事件遵循事件驱动架构模式。"

#: ../../source/usage.rst:106
msgid "**Roles**"
msgstr "**角色**"

#: ../../source/usage.rst:107
msgid "Entities that manage workflows and handle task delegation."
msgstr "管理工作流并处理任务委派的实体。"

#: ../../source/usage.rst:109
msgid "**Tasks**"
msgstr "**任务**"

#: ../../source/usage.rst:110
msgid "Work items that get processed through workflows."
msgstr "通过工作流进行处理的工作项。"

#: ../../source/usage.rst:113
msgid "Getting Started"
msgstr "入门指南"

#: ../../source/usage.rst:115
msgid "Install fabricatio with desired capabilities"
msgstr "安装带有所需功能的 fabricatio"

#: ../../source/usage.rst:116
msgid "Define your actions by subclassing ``Action``"
msgstr ""

#: ../../source/usage.rst:117
msgid "Create workflows combining your actions"
msgstr "创建组合您操作的工作流"

#: ../../source/usage.rst:118
msgid "Register workflows with roles using events"
msgstr "使用事件将工作流注册到角色"

#: ../../source/usage.rst:119
msgid "Submit tasks for processing"
msgstr "提交任务以进行处理"

#~ msgid "Available Examples"
#~ msgstr "可用示例"

#~ msgid ""
#~ "Fabricatio comes with numerous examples "
#~ "demonstrating various use cases:"
#~ msgstr "Fabricatio 提供了大量展示各种使用场景的示例："

#~ msgid "**Basic Examples:**"
#~ msgstr "**基础示例：**"

#~ msgid "``examples/minor/hello_fabricatio.py`` - Simple hello world"
#~ msgstr "``examples/minor/hello_fabricatio.py`` - 简单的 Hello World 示例"

#~ msgid "``examples/minor/write_a_poem.py`` - Creative writing"
#~ msgstr "``examples/minor/write_a_poem.py`` - 创意写作"

#~ msgid "``examples/simple_chat/chat.py`` - Basic chat interface"
#~ msgstr "``examples/simple_chat/chat.py`` - 基础聊天界面"

#~ msgid "**Advanced Examples:**"
#~ msgstr "**高级示例：**"

#~ msgid "``examples/simple_rag/simple_rag.py`` - Retrieval-Augmented Generation"
#~ msgstr "``examples/simple_rag/simple_rag.py`` - 检索增强生成（RAG）"

#~ msgid "``examples/extract_article/extract.py`` - Article extraction"
#~ msgstr "``examples/extract_article/extract.py`` - 文章提取"

#~ msgid "``examples/propose_task/propose.py`` - Task proposal system"
#~ msgstr "``examples/propose_task/propose.py`` - 任务提案系统"

#~ msgid "``examples/reviewer/review.py`` - Code review automation"
#~ msgstr "``examples/reviewer/review.py`` - 代码审查自动化"

#~ msgid "``examples/write_outline/write_outline.py`` - Outline generation"
#~ msgstr "``examples/write_outline/write_outline.py`` - 大纲生成"

#~ msgid "**Specialized Examples:**"
#~ msgstr "**专门示例：**"

#~ msgid "``examples/anki_deck/deck_gen.py`` - Anki deck generation"
#~ msgstr "``examples/anki_deck/deck_gen.py`` - Anki 卡片生成"

#~ msgid "``examples/make_diary/diary.py`` - Diary creation from git commits"
#~ msgstr "``examples/make_diary/diary.py`` - 从 Git 提交创建日记"

#~ msgid "``examples/search_bibtex/search.py`` - BibTeX search functionality"
#~ msgstr "``examples/search_bibtex/search.py`` - BibTeX 搜索功能"

#~ msgid "``examples/yue/compose.py`` - Yue language composition"
#~ msgstr "``examples/yue/compose.py`` - 粤语创作"

#~ msgid ""
#~ "Define your actions by subclassing `[Action](file://L:\r"
#~ "ust_proj\\fabricatio\\packages\\fabricatio-"
#~ "core\\python\\fabricatio_core\\models\\action.py#L28-L90)`"
#~ msgstr ""
#~ "通过继承 `[Action](file://L:\r"
#~ "ust_proj\\fabricatio\\packages\\fabricatio-"
#~ "core\\python\\fabricatio_core\\models\\action.py#L28-L90)` "
#~ "定义您的操作"

